{"version":3,"sources":["Component/Cheatsheet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cheatsheet","Unit","TimeUnit","UnitLookup","T","B","M","K","TimeUnitLookup","SECOND","HOUR","DAY","MONTH","YEAR","parseNumToUnit","input","unit","toFixed","App","React","useState","setInput","inputTU","setInputTU","output","setOutput","outputTU","setOutputTU","inputInNum","useMemo","onlyDigits","test","withUnit","last","slice","toUpperCase","parseFloat","parseInputToNum","handleInputCheck","event","target","name","checked","handleOutputCheck","useEffect","inputInNum_in_second","className","Object","keys","map","Form","Check","inline","label","toLowerCase","type","onChange","InputGroup","Prepend","Text","FormControl","placeholder","value","e","readOnly","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b607e7b1.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nfunction Cheatsheet() {\n    return (\n        <ReactMarkdown>\n            {`\n## Numbers\n\n- Latencies:\n- Hashing:\n    - MD5: 128 bits\n    - SHA-1: 160 bits\n    - SHA-2: SHA-226, SHA-256, SHA-512\n    - bcrypt:\n- Character Encoding:\n    - ASCII: 7 or 8 bits = 128 or 256 characters\n    - Unicode: ~16 bits ~ 2 bytes (not fixed)\n- rps/qps:\n    - SQL DB: 1k\n    - nodejs: 10k\n    - redis: 100k\n- MySQL:\n    - int / bigint: 4 / 8 bytes (32 / 64bit)\n    - float / double: 4 / 8 bytes (32 / 64bit)\n    - char(0-255): 0-255 bytes\n    - varchar(M) with length L: (L + 1) bytes if L < 255, else (L + 2) bytes\n    - text with length L: (L + 2) bytes\n    - datetime: 8 bytes\n\n[https://colin-scott.github.io/personal_website/research/interactive_latency.html](https://colin-scott.github.io/personal_website/research/interactive_latency.html)`}\n        </ReactMarkdown>\n    );\n}\n\nexport default Cheatsheet;\n","import React from \"react\";\nimport { Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport \"./App.scss\";\nimport Cheatsheet from \"./Component/Cheatsheet\";\n\nenum Unit {\n    T = \"T\",\n    B = \"B\",\n    M = \"M\",\n    K = \"K\",\n}\nenum TimeUnit {\n    YEAR = \"YEAR\",\n    MONTH = \"MONTH\",\n    DAY = \"DAY\",\n    HOUR = \"HOUR\",\n    SECOND = \"SECOND\",\n}\n\nconst UnitLookup: {\n    [key in keyof typeof Unit]: number;\n} = {\n    T: 10 ** 12,\n    B: 10 ** 9,\n    M: 10 ** 6,\n    K: 10 ** 3,\n};\n\nconst TimeUnitLookup: {\n    [key in keyof typeof TimeUnit]: number;\n} = {\n    SECOND: 60,\n    HOUR: 60 * 60,\n    DAY: 3600 * 24,\n    MONTH: 86400 * 30,\n    YEAR: 86400 * 30 * 365,\n};\n\nfunction parseInputToNum(input: string): number {\n    const onlyDigits = /^\\d+.?\\d*$/.test(input);\n    const withUnit = /^\\d+.?\\d*(T|B|M|K)$/.test(input);\n    if (!onlyDigits && !withUnit) return 0;\n\n    if (withUnit) {\n        let last = input.slice(-1).toUpperCase();\n        return parseFloat(input.slice(0, -1)) * UnitLookup[last as Unit];\n    }\n\n    return parseFloat(input);\n}\n\nfunction parseNumToUnit(input: number, unit: Unit): string {\n    return (input / UnitLookup[unit]).toFixed(2) + unit;\n}\n\nfunction App() {\n    const [input, setInput] = React.useState(\"\");\n    const [inputTU, setInputTU] = React.useState<TimeUnit>(TimeUnit.DAY);\n\n    const [output, setOutput] = React.useState(\"\");\n    const [outputTU, setOutputTU] = React.useState<TimeUnit>(TimeUnit.SECOND);\n    const inputInNum = React.useMemo(() => parseInputToNum(input), [input]);\n\n    React.useEffect(() => {\n        // Convert `inputInNum` in second\n        let inputInNum_in_second =\n            inputTU === TimeUnit.SECOND\n                ? inputInNum\n                : inputInNum / TimeUnitLookup[inputTU];\n\n        if (outputTU === TimeUnit.SECOND) {\n            setOutput(inputInNum_in_second.toFixed(2));\n        } else {\n            setOutput(\n                (inputInNum_in_second * TimeUnitLookup[outputTU]).toFixed(2)\n            );\n        }\n    }, [inputInNum, inputTU, outputTU]);\n\n    function handleInputCheck(event: React.ChangeEvent<HTMLInputElement>) {\n        const { name, checked } = event.target;\n        checked && setInputTU(TimeUnit[name as keyof typeof TimeUnit]);\n    }\n\n    function handleOutputCheck(event: React.ChangeEvent<HTMLInputElement>) {\n        const { name, checked } = event.target;\n        checked && setOutputTU(TimeUnit[name as keyof typeof TimeUnit]);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <div className=\"mb-3\">\n                    {Object.keys(TimeUnit).map((unit) => (\n                        <Form.Check\n                            inline\n                            key={`check-${unit}`}\n                            name={unit}\n                            label={`in ${unit.toLowerCase()}`}\n                            type=\"checkbox\"\n                            onChange={handleInputCheck}\n                            checked={inputTU === unit}\n                        />\n                    ))}\n                </div>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Input</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        placeholder=\"Number\"\n                        value={input}\n                        onChange={(e) => {\n                            setInput(e.target.value);\n                        }}\n                    />\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                    {Object.keys(Unit).map((unit) => (\n                        <FormControl\n                            key={`output-${unit}`}\n                            readOnly\n                            value={parseNumToUnit(\n                                inputInNum,\n                                Unit[unit as keyof typeof Unit]\n                            )}\n                        />\n                    ))}\n                </InputGroup>\n                <div className=\"mb-3\">\n                    {Object.keys(TimeUnit).map((unit) => (\n                        <Form.Check\n                            inline\n                            key={`check-${unit}`}\n                            name={unit}\n                            label={`in ${unit.toLowerCase()}`}\n                            type=\"checkbox\"\n                            onChange={handleOutputCheck}\n                            checked={outputTU === unit}\n                        />\n                    ))}\n                </div>\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>Output</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl readOnly value={output} />\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                    {Object.keys(Unit).map((unit) => (\n                        <FormControl\n                            key={`output-${unit}`}\n                            readOnly\n                            value={parseNumToUnit(\n                                parseInt(output),\n                                Unit[unit as keyof typeof Unit]\n                            )}\n                        />\n                    ))}\n                </InputGroup>\n\n                <Cheatsheet />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}